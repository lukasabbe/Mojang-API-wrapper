const MOJANG_API_URI = "https://api.mojang.com";class MinecraftProfile {    MinecraftUUID;    MinecraftUsername;    MinecraftSkinData;    OptifineCapeUrl;    constructor(MinecraftUUID, MinecraftUsername){        this.MinecraftUUID = MinecraftUUID;        this.MinecraftUsername = MinecraftUsername;        this.MinecraftSkinData = null;        this.OptifineCapeUrl = "";    }    getUUID() {        return this.MinecraftUUID;    }    getFullUUID(){        return `${this.MinecraftUUID.slice(0,8)}-${this.MinecraftUUID.slice(8,12)}-${this.MinecraftUUID.slice(12,16)}-${this.MinecraftUUID.slice(16,20)}-${this.MinecraftUUID.slice(20)}`    }    getName() {        return this.MinecraftUsername    }    async getSkinUrl(){        if(this.MinecraftSkinData == null) await this.getSkinData();        return this.MinecraftSkinData.skinUrl;    }    async getCapeUrl(){        if(this.MinecraftSkinData == null) await this.getSkinData();        return this.MinecraftSkinData.capeUrl;    }    async getModel(){        if(this.MinecraftSkinData == null) await this.getSkinData();        return this.MinecraftSkinData.model;    }    async getOptifineCapeUrl(){        if(this.OptifineCapeUrl == "") this.OptifineCapeUrl = await getOptfineCapeUrl(this.MinecraftUsername);        return this.OptifineCapeUrl;    }    async _getSkinData(){        this.MinecraftSkinData = await getSkinData(this.MinecraftUUID);    }}class SkinData {    timestamp;    UUID;    username;    skinUrl;    capeUrl;    model;    skinJsonData;    constructor(skinJsonData){        this.timestamp = skinJsonData.timestamp;        this.UUID = skinJsonData.profileId;        this.username = skinJsonData.profileName;        this.skinJsonData = skinJsonData;                this.capeUrl = (skinJsonData.textures.CAPE) ? skinJsonData.textures.CAPE.url : null;        if(skinJsonData.textures.SKIN){            this.skinUrl = skinJsonData.textures.SKIN.url;            this.model = (skinJsonData.textures.SKIN.metadata) ? "SLIM" : "CLASSIC"        } else {            this.skinUrl = null;            this.model = "CLASSIC";        }    }}const functions = {    getProfileFromUUID: async (UUID) => {        const data = await fetch(`${MOJANG_API_URI}/minecraft/profile/lookup/${UUID}`);        if(!data.ok) return null;        const jsonData = await data.json();        return new MinecraftProfile(UUID, jsonData.name);    },    getProfileFromUsername: async (username) => {        const data = await fetch(`${MOJANG_API_URI}/users/profiles/minecraft/${username}`);        if(!data.ok) return null;        const jsonData = await data.json();        return new MinecraftProfile(jsonData.id, username);    },    getProfilesFromUsernames: async (usernames) => {        const splitedUsernames = [];        let counter = 0;        let tempArray = [];        usernames.forEach(username => {            if(counter == 10){                splitedUsernames.push(tempArray);                tempArray = [];                counter = 0;            }            tempArray.push(username);            counter++;        });            splitedUsernames.push(tempArray);            const Profiles = []        for(const users of splitedUsernames) {                const data = await fetch(`${MOJANG_API_URI}/profiles/minecraft`, {                method: "POST",                headers: {                    'Content-Type': 'application/json',                },                body : JSON.stringify(users)            })            if(!data.ok) return null;            const jsonData = await data.json()            for (const jsonProfile of jsonData){                Profiles.push(new MinecraftProfile(jsonProfile.id, jsonProfile.name))            }        }            return Profiles;    },    getSkinData: async (UUID) => {        const data = await fetch(`https://sessionserver.mojang.com/session/minecraft/profile/${UUID}`);        if(!data.ok) return null;        const jsonData = await data.json();        return new SkinData(JSON.parse(atob(jsonData.properties[0].value)));    },    checkIfServerBlocked: async (serverIp) => {        const data = await fetch(`https://sessionserver.mojang.com/blockedservers`);        if(!data.ok) return false;        const textData = await data.text();            const lines = textData.split("\n");        let hash = await crypto.subtle.digest("SHA-1", serverIp);        for(const line of lines){            if(line == hash) return true;        }            serverIp = "*."+serverIp;            while(serverIp.length > 0){            let hash = await crypto.subtle.digest("SHA-1", serverIp);            for(const line of lines){                if(line == hash) return true;            }            serverIp = truncateIp(serverIp);        }        return false;    },    truncateIp: (ip) => {        const splitedIp = ip.split(".");        if(splitedIp.length <= 2) return "";        let tempIp = "*.";        for(let i = 2; i < splitedIp.length; i++)            if(i == splitedIp.length - 1)                tempIp += splitedIp[i];            else                tempIp += splitedIp[i] + ".";        return tempIp;    },    getOptfineCapeUrl: async (username) => {        const data = await fetch(`http://s.optifine.net/capes/${username}.png`);        if (!data.ok) return null;        return `http://s.optifine.net/capes/${username}.png`;    }}